// Code generated by goa v3.7.2, DO NOT EDIT.
//
// controller HTTP client CLI support package
//
// Command:
// $ goa gen goa-sample/design

package cli

import (
	"flag"
	"fmt"
	usercontrollerc "goa-sample/gen/http/user_controller/client"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `user-controller (get-users|get-user|update-user|create-user|delete-user)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` user-controller get-users` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		userControllerFlags = flag.NewFlagSet("user-controller", flag.ContinueOnError)

		userControllerGetUsersFlags = flag.NewFlagSet("get-users", flag.ExitOnError)

		userControllerGetUserFlags  = flag.NewFlagSet("get-user", flag.ExitOnError)
		userControllerGetUserIDFlag = userControllerGetUserFlags.String("id", "REQUIRED", "ユーザーID")

		userControllerUpdateUserFlags    = flag.NewFlagSet("update-user", flag.ExitOnError)
		userControllerUpdateUserBodyFlag = userControllerUpdateUserFlags.String("body", "REQUIRED", "")
		userControllerUpdateUserIDFlag   = userControllerUpdateUserFlags.String("id", "REQUIRED", "ユーザーID")

		userControllerCreateUserFlags    = flag.NewFlagSet("create-user", flag.ExitOnError)
		userControllerCreateUserBodyFlag = userControllerCreateUserFlags.String("body", "REQUIRED", "")

		userControllerDeleteUserFlags  = flag.NewFlagSet("delete-user", flag.ExitOnError)
		userControllerDeleteUserIDFlag = userControllerDeleteUserFlags.String("id", "REQUIRED", "ユーザーID")
	)
	userControllerFlags.Usage = userControllerUsage
	userControllerGetUsersFlags.Usage = userControllerGetUsersUsage
	userControllerGetUserFlags.Usage = userControllerGetUserUsage
	userControllerUpdateUserFlags.Usage = userControllerUpdateUserUsage
	userControllerCreateUserFlags.Usage = userControllerCreateUserUsage
	userControllerDeleteUserFlags.Usage = userControllerDeleteUserUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "user-controller":
			svcf = userControllerFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "user-controller":
			switch epn {
			case "get-users":
				epf = userControllerGetUsersFlags

			case "get-user":
				epf = userControllerGetUserFlags

			case "update-user":
				epf = userControllerUpdateUserFlags

			case "create-user":
				epf = userControllerCreateUserFlags

			case "delete-user":
				epf = userControllerDeleteUserFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "user-controller":
			c := usercontrollerc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-users":
				endpoint = c.GetUsers()
				data = nil
			case "get-user":
				endpoint = c.GetUser()
				data, err = usercontrollerc.BuildGetUserPayload(*userControllerGetUserIDFlag)
			case "update-user":
				endpoint = c.UpdateUser()
				data, err = usercontrollerc.BuildUpdateUserPayload(*userControllerUpdateUserBodyFlag, *userControllerUpdateUserIDFlag)
			case "create-user":
				endpoint = c.CreateUser()
				data, err = usercontrollerc.BuildCreateUserPayload(*userControllerCreateUserBodyFlag)
			case "delete-user":
				endpoint = c.DeleteUser()
				data, err = usercontrollerc.BuildDeleteUserPayload(*userControllerDeleteUserIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// user-controllerUsage displays the usage of the user-controller command and
// its subcommands.
func userControllerUsage() {
	fmt.Fprintf(os.Stderr, `ユーザ関連のエンドポイント
Usage:
    %[1]s [globalflags] user-controller COMMAND [flags]

COMMAND:
    get-users: ユーザ一覧の検索
    get-user: ユーザ検索
    update-user: ユーザ更新
    create-user: ユーザ登録
    delete-user: ユーザ削除

Additional help:
    %[1]s user-controller COMMAND --help
`, os.Args[0])
}
func userControllerGetUsersUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] user-controller get-users

ユーザ一覧の検索

Example:
    %[1]s user-controller get-users
`, os.Args[0])
}

func userControllerGetUserUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] user-controller get-user -id INT

ユーザ検索
    -id INT: ユーザーID

Example:
    %[1]s user-controller get-user --id 6011000152231851325
`, os.Args[0])
}

func userControllerUpdateUserUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] user-controller update-user -body JSON -id INT

ユーザ更新
    -body JSON: 
    -id INT: ユーザーID

Example:
    %[1]s user-controller update-user --body '{
      "email": "xxxxxx@xxxx.xxx",
      "name": "John Lennon"
   }' --id 7015167470300828162
`, os.Args[0])
}

func userControllerCreateUserUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] user-controller create-user -body JSON

ユーザ登録
    -body JSON: 

Example:
    %[1]s user-controller create-user --body '{
      "email": "xxxxxx@xxxx.xxx",
      "name": "John Lennon"
   }'
`, os.Args[0])
}

func userControllerDeleteUserUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] user-controller delete-user -id INT

ユーザ削除
    -id INT: ユーザーID

Example:
    %[1]s user-controller delete-user --id 4887016811865582828
`, os.Args[0])
}
