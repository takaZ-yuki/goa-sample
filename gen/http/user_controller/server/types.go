// Code generated by goa v3.7.2, DO NOT EDIT.
//
// user_controller HTTP server types
//
// Command:
// $ goa gen goa-sample/design

package server

import (
	usercontroller "goa-sample/gen/user_controller"

	goa "goa.design/goa/v3/pkg"
)

// GetUsersResponseBody is the type of the "user_controller" service "GetUsers"
// endpoint HTTP response body.
type GetUsersResponseBody []*UserResponse

// GetUserResponseBody is the type of the "user_controller" service "GetUser"
// endpoint HTTP response body.
type GetUserResponseBody struct {
	// ユーザーID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// ユーザー名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Eメール
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// GetUsersNotFoundResponseBody is the type of the "user_controller" service
// "GetUsers" endpoint HTTP response body for the "NotFound" error.
type GetUsersNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetUsersBadRequestResponseBody is the type of the "user_controller" service
// "GetUsers" endpoint HTTP response body for the "BadRequest" error.
type GetUsersBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetUserNotFoundResponseBody is the type of the "user_controller" service
// "GetUser" endpoint HTTP response body for the "NotFound" error.
type GetUserNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetUserBadRequestResponseBody is the type of the "user_controller" service
// "GetUser" endpoint HTTP response body for the "BadRequest" error.
type GetUserBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateUserNotFoundResponseBody is the type of the "user_controller" service
// "UpdateUser" endpoint HTTP response body for the "NotFound" error.
type UpdateUserNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateUserBadRequestResponseBody is the type of the "user_controller"
// service "UpdateUser" endpoint HTTP response body for the "BadRequest" error.
type UpdateUserBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateUserNotFoundResponseBody is the type of the "user_controller" service
// "CreateUser" endpoint HTTP response body for the "NotFound" error.
type CreateUserNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateUserBadRequestResponseBody is the type of the "user_controller"
// service "CreateUser" endpoint HTTP response body for the "BadRequest" error.
type CreateUserBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteUserNotFoundResponseBody is the type of the "user_controller" service
// "DeleteUser" endpoint HTTP response body for the "NotFound" error.
type DeleteUserNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteUserBadRequestResponseBody is the type of the "user_controller"
// service "DeleteUser" endpoint HTTP response body for the "BadRequest" error.
type DeleteUserBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UserResponse is used to define fields on response body types.
type UserResponse struct {
	// ユーザーID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// ユーザー名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Eメール
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// NewGetUsersResponseBody builds the HTTP response body from the result of the
// "GetUsers" endpoint of the "user_controller" service.
func NewGetUsersResponseBody(res []*usercontroller.User) GetUsersResponseBody {
	body := make([]*UserResponse, len(res))
	for i, val := range res {
		body[i] = marshalUsercontrollerUserToUserResponse(val)
	}
	return body
}

// NewGetUserResponseBody builds the HTTP response body from the result of the
// "GetUser" endpoint of the "user_controller" service.
func NewGetUserResponseBody(res *usercontroller.User) *GetUserResponseBody {
	body := &GetUserResponseBody{
		ID:    res.ID,
		Name:  res.Name,
		Email: res.Email,
	}
	return body
}

// NewGetUsersNotFoundResponseBody builds the HTTP response body from the
// result of the "GetUsers" endpoint of the "user_controller" service.
func NewGetUsersNotFoundResponseBody(res *goa.ServiceError) *GetUsersNotFoundResponseBody {
	body := &GetUsersNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUsersBadRequestResponseBody builds the HTTP response body from the
// result of the "GetUsers" endpoint of the "user_controller" service.
func NewGetUsersBadRequestResponseBody(res *goa.ServiceError) *GetUsersBadRequestResponseBody {
	body := &GetUsersBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUserNotFoundResponseBody builds the HTTP response body from the result
// of the "GetUser" endpoint of the "user_controller" service.
func NewGetUserNotFoundResponseBody(res *goa.ServiceError) *GetUserNotFoundResponseBody {
	body := &GetUserNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUserBadRequestResponseBody builds the HTTP response body from the
// result of the "GetUser" endpoint of the "user_controller" service.
func NewGetUserBadRequestResponseBody(res *goa.ServiceError) *GetUserBadRequestResponseBody {
	body := &GetUserBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateUserNotFoundResponseBody builds the HTTP response body from the
// result of the "UpdateUser" endpoint of the "user_controller" service.
func NewUpdateUserNotFoundResponseBody(res *goa.ServiceError) *UpdateUserNotFoundResponseBody {
	body := &UpdateUserNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateUserBadRequestResponseBody builds the HTTP response body from the
// result of the "UpdateUser" endpoint of the "user_controller" service.
func NewUpdateUserBadRequestResponseBody(res *goa.ServiceError) *UpdateUserBadRequestResponseBody {
	body := &UpdateUserBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateUserNotFoundResponseBody builds the HTTP response body from the
// result of the "CreateUser" endpoint of the "user_controller" service.
func NewCreateUserNotFoundResponseBody(res *goa.ServiceError) *CreateUserNotFoundResponseBody {
	body := &CreateUserNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateUserBadRequestResponseBody builds the HTTP response body from the
// result of the "CreateUser" endpoint of the "user_controller" service.
func NewCreateUserBadRequestResponseBody(res *goa.ServiceError) *CreateUserBadRequestResponseBody {
	body := &CreateUserBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteUserNotFoundResponseBody builds the HTTP response body from the
// result of the "DeleteUser" endpoint of the "user_controller" service.
func NewDeleteUserNotFoundResponseBody(res *goa.ServiceError) *DeleteUserNotFoundResponseBody {
	body := &DeleteUserNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteUserBadRequestResponseBody builds the HTTP response body from the
// result of the "DeleteUser" endpoint of the "user_controller" service.
func NewDeleteUserBadRequestResponseBody(res *goa.ServiceError) *DeleteUserBadRequestResponseBody {
	body := &DeleteUserBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUserPayload builds a user_controller service GetUser endpoint payload.
func NewGetUserPayload(id int) *usercontroller.GetUserPayload {
	v := &usercontroller.GetUserPayload{}
	v.ID = id

	return v
}

// NewUpdateUserUser builds a user_controller service UpdateUser endpoint
// payload.
func NewUpdateUserUser(body struct {
	// ユーザー名
	Name *string `form:"name" json:"name" xml:"name"`
	// Eメール
	Email *string `form:"email" json:"email" xml:"email"`
}, id int) *usercontroller.User {
	v := &usercontroller.User{
		Name:  body.Name,
		Email: body.Email,
	}
	v.ID = &id

	return v
}

// NewCreateUserUser builds a user_controller service CreateUser endpoint
// payload.
func NewCreateUserUser(body struct {
	// ユーザー名
	Name *string `form:"name" json:"name" xml:"name"`
	// Eメール
	Email *string `form:"email" json:"email" xml:"email"`
}) *usercontroller.User {
	v := &usercontroller.User{
		Name:  body.Name,
		Email: body.Email,
	}

	return v
}

// NewDeleteUserPayload builds a user_controller service DeleteUser endpoint
// payload.
func NewDeleteUserPayload(id int) *usercontroller.DeleteUserPayload {
	v := &usercontroller.DeleteUserPayload{}
	v.ID = id

	return v
}
