// Code generated by goa v3.7.2, DO NOT EDIT.
//
// user_controller HTTP client encoders and decoders
//
// Command:
// $ goa gen goa-sample/design

package client

import (
	"bytes"
	"context"
	usercontroller "goa-sample/gen/user_controller"
	"io/ioutil"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildGetUsersRequest instantiates a HTTP request object with method and path
// set to call the "user_controller" service "GetUsers" endpoint
func (c *Client) BuildGetUsersRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetUsersUserControllerPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("user_controller", "GetUsers", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetUsersResponse returns a decoder for responses returned by the
// user_controller GetUsers endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeGetUsersResponse may return the following errors:
//	- "NotFound" (type *goa.ServiceError): http.StatusNotFound
//	- "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeGetUsersResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetUsersResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user_controller", "GetUsers", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateUserResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("user_controller", "GetUsers", err)
			}
			res := NewGetUsersUserOK(body)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetUsersNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user_controller", "GetUsers", err)
			}
			err = ValidateGetUsersNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user_controller", "GetUsers", err)
			}
			return nil, NewGetUsersNotFound(&body)
		case http.StatusBadRequest:
			var (
				body GetUsersBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user_controller", "GetUsers", err)
			}
			err = ValidateGetUsersBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user_controller", "GetUsers", err)
			}
			return nil, NewGetUsersBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("user_controller", "GetUsers", resp.StatusCode, string(body))
		}
	}
}

// BuildGetUserRequest instantiates a HTTP request object with method and path
// set to call the "user_controller" service "GetUser" endpoint
func (c *Client) BuildGetUserRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*usercontroller.GetUserPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("user_controller", "GetUser", "*usercontroller.GetUserPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetUserUserControllerPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("user_controller", "GetUser", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetUserResponse returns a decoder for responses returned by the
// user_controller GetUser endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeGetUserResponse may return the following errors:
//	- "NotFound" (type *goa.ServiceError): http.StatusNotFound
//	- "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeGetUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetUserResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user_controller", "GetUser", err)
			}
			err = ValidateGetUserResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user_controller", "GetUser", err)
			}
			res := NewGetUserUserOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetUserNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user_controller", "GetUser", err)
			}
			err = ValidateGetUserNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user_controller", "GetUser", err)
			}
			return nil, NewGetUserNotFound(&body)
		case http.StatusBadRequest:
			var (
				body GetUserBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user_controller", "GetUser", err)
			}
			err = ValidateGetUserBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user_controller", "GetUser", err)
			}
			return nil, NewGetUserBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("user_controller", "GetUser", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateUserRequest instantiates a HTTP request object with method and
// path set to call the "user_controller" service "UpdateUser" endpoint
func (c *Client) BuildUpdateUserRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*usercontroller.User)
		if !ok {
			return nil, goahttp.ErrInvalidType("user_controller", "UpdateUser", "*usercontroller.User", v)
		}
		if p.ID != nil {
			id = *p.ID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateUserUserControllerPath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("user_controller", "UpdateUser", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateUserRequest returns an encoder for requests sent to the
// user_controller UpdateUser server.
func EncodeUpdateUserRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*usercontroller.User)
		if !ok {
			return goahttp.ErrInvalidType("user_controller", "UpdateUser", "*usercontroller.User", v)
		}
		body := p
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("user_controller", "UpdateUser", err)
		}
		return nil
	}
}

// DecodeUpdateUserResponse returns a decoder for responses returned by the
// user_controller UpdateUser endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeUpdateUserResponse may return the following errors:
//	- "NotFound" (type *goa.ServiceError): http.StatusNotFound
//	- "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeUpdateUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusNotFound:
			var (
				body UpdateUserNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user_controller", "UpdateUser", err)
			}
			err = ValidateUpdateUserNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user_controller", "UpdateUser", err)
			}
			return nil, NewUpdateUserNotFound(&body)
		case http.StatusBadRequest:
			var (
				body UpdateUserBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user_controller", "UpdateUser", err)
			}
			err = ValidateUpdateUserBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user_controller", "UpdateUser", err)
			}
			return nil, NewUpdateUserBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("user_controller", "UpdateUser", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateUserRequest instantiates a HTTP request object with method and
// path set to call the "user_controller" service "CreateUser" endpoint
func (c *Client) BuildCreateUserRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateUserUserControllerPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("user_controller", "CreateUser", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateUserRequest returns an encoder for requests sent to the
// user_controller CreateUser server.
func EncodeCreateUserRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*usercontroller.User)
		if !ok {
			return goahttp.ErrInvalidType("user_controller", "CreateUser", "*usercontroller.User", v)
		}
		body := p
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("user_controller", "CreateUser", err)
		}
		return nil
	}
}

// DecodeCreateUserResponse returns a decoder for responses returned by the
// user_controller CreateUser endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeCreateUserResponse may return the following errors:
//	- "NotFound" (type *goa.ServiceError): http.StatusNotFound
//	- "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeCreateUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusNotFound:
			var (
				body CreateUserNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user_controller", "CreateUser", err)
			}
			err = ValidateCreateUserNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user_controller", "CreateUser", err)
			}
			return nil, NewCreateUserNotFound(&body)
		case http.StatusBadRequest:
			var (
				body CreateUserBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user_controller", "CreateUser", err)
			}
			err = ValidateCreateUserBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user_controller", "CreateUser", err)
			}
			return nil, NewCreateUserBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("user_controller", "CreateUser", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteUserRequest instantiates a HTTP request object with method and
// path set to call the "user_controller" service "DeleteUser" endpoint
func (c *Client) BuildDeleteUserRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*usercontroller.DeleteUserPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("user_controller", "DeleteUser", "*usercontroller.DeleteUserPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteUserUserControllerPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("user_controller", "DeleteUser", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeleteUserResponse returns a decoder for responses returned by the
// user_controller DeleteUser endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeDeleteUserResponse may return the following errors:
//	- "NotFound" (type *goa.ServiceError): http.StatusNotFound
//	- "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeDeleteUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusNotFound:
			var (
				body DeleteUserNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user_controller", "DeleteUser", err)
			}
			err = ValidateDeleteUserNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user_controller", "DeleteUser", err)
			}
			return nil, NewDeleteUserNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeleteUserBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user_controller", "DeleteUser", err)
			}
			err = ValidateDeleteUserBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user_controller", "DeleteUser", err)
			}
			return nil, NewDeleteUserBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("user_controller", "DeleteUser", resp.StatusCode, string(body))
		}
	}
}

// unmarshalUserResponseToUsercontrollerUser builds a value of type
// *usercontroller.User from a value of type *UserResponse.
func unmarshalUserResponseToUsercontrollerUser(v *UserResponse) *usercontroller.User {
	res := &usercontroller.User{
		ID:    v.ID,
		Name:  v.Name,
		Email: v.Email,
	}

	return res
}
