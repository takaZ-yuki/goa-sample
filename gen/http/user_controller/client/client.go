// Code generated by goa v3.7.2, DO NOT EDIT.
//
// user_controller client HTTP transport
//
// Command:
// $ goa gen goa-sample/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the user_controller service endpoint HTTP clients.
type Client struct {
	// GetUsers Doer is the HTTP client used to make requests to the GetUsers
	// endpoint.
	GetUsersDoer goahttp.Doer

	// GetUser Doer is the HTTP client used to make requests to the GetUser
	// endpoint.
	GetUserDoer goahttp.Doer

	// UpdateUser Doer is the HTTP client used to make requests to the UpdateUser
	// endpoint.
	UpdateUserDoer goahttp.Doer

	// CreateUser Doer is the HTTP client used to make requests to the CreateUser
	// endpoint.
	CreateUserDoer goahttp.Doer

	// DeleteUser Doer is the HTTP client used to make requests to the DeleteUser
	// endpoint.
	DeleteUserDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the user_controller service
// servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		GetUsersDoer:        doer,
		GetUserDoer:         doer,
		UpdateUserDoer:      doer,
		CreateUserDoer:      doer,
		DeleteUserDoer:      doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// GetUsers returns an endpoint that makes HTTP requests to the user_controller
// service GetUsers server.
func (c *Client) GetUsers() goa.Endpoint {
	var (
		decodeResponse = DecodeGetUsersResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetUsersRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetUsersDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("user_controller", "GetUsers", err)
		}
		return decodeResponse(resp)
	}
}

// GetUser returns an endpoint that makes HTTP requests to the user_controller
// service GetUser server.
func (c *Client) GetUser() goa.Endpoint {
	var (
		decodeResponse = DecodeGetUserResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetUserRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetUserDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("user_controller", "GetUser", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateUser returns an endpoint that makes HTTP requests to the
// user_controller service UpdateUser server.
func (c *Client) UpdateUser() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateUserRequest(c.encoder)
		decodeResponse = DecodeUpdateUserResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateUserRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateUserDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("user_controller", "UpdateUser", err)
		}
		return decodeResponse(resp)
	}
}

// CreateUser returns an endpoint that makes HTTP requests to the
// user_controller service CreateUser server.
func (c *Client) CreateUser() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateUserRequest(c.encoder)
		decodeResponse = DecodeCreateUserResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateUserRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateUserDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("user_controller", "CreateUser", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteUser returns an endpoint that makes HTTP requests to the
// user_controller service DeleteUser server.
func (c *Client) DeleteUser() goa.Endpoint {
	var (
		decodeResponse = DecodeDeleteUserResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDeleteUserRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteUserDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("user_controller", "DeleteUser", err)
		}
		return decodeResponse(resp)
	}
}
