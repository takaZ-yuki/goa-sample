// Code generated by goa v3.7.2, DO NOT EDIT.
//
// user_controller HTTP client CLI support package
//
// Command:
// $ goa gen goa-sample/design

package client

import (
	"encoding/json"
	"fmt"
	usercontroller "goa-sample/gen/user_controller"
	"strconv"
)

// BuildGetUserPayload builds the payload for the user_controller GetUser
// endpoint from CLI flags.
func BuildGetUserPayload(userControllerGetUserID string) (*usercontroller.GetUserPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(userControllerGetUserID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &usercontroller.GetUserPayload{}
	v.ID = id

	return v, nil
}

// BuildUpdateUserPayload builds the payload for the user_controller UpdateUser
// endpoint from CLI flags.
func BuildUpdateUserPayload(userControllerUpdateUserBody string, userControllerUpdateUserID string) (*usercontroller.User, error) {
	var err error
	var body struct {
		// ユーザー名
		Name *string `form:"name" json:"name" xml:"name"`
		// Eメール
		Email *string `form:"email" json:"email" xml:"email"`
	}
	{
		err = json.Unmarshal([]byte(userControllerUpdateUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"xxxxxx@xxxx.xxx\",\n      \"name\": \"John Lennon\"\n   }'")
		}
	}
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(userControllerUpdateUserID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &usercontroller.User{
		Name:  body.Name,
		Email: body.Email,
	}
	v.ID = &id

	return v, nil
}

// BuildCreateUserPayload builds the payload for the user_controller CreateUser
// endpoint from CLI flags.
func BuildCreateUserPayload(userControllerCreateUserBody string) (*usercontroller.User, error) {
	var err error
	var body struct {
		// ユーザー名
		Name *string `form:"name" json:"name" xml:"name"`
		// Eメール
		Email *string `form:"email" json:"email" xml:"email"`
	}
	{
		err = json.Unmarshal([]byte(userControllerCreateUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"xxxxxx@xxxx.xxx\",\n      \"name\": \"John Lennon\"\n   }'")
		}
	}
	v := &usercontroller.User{
		Name:  body.Name,
		Email: body.Email,
	}

	return v, nil
}

// BuildDeleteUserPayload builds the payload for the user_controller DeleteUser
// endpoint from CLI flags.
func BuildDeleteUserPayload(userControllerDeleteUserID string) (*usercontroller.DeleteUserPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(userControllerDeleteUserID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &usercontroller.DeleteUserPayload{}
	v.ID = id

	return v, nil
}
