// Code generated by goa v3.7.2, DO NOT EDIT.
//
// user_controller endpoints
//
// Command:
// $ goa gen goa-sample/design

package usercontroller

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "user_controller" service endpoints.
type Endpoints struct {
	GetUsers   goa.Endpoint
	GetUser    goa.Endpoint
	UpdateUser goa.Endpoint
	CreateUser goa.Endpoint
	DeleteUser goa.Endpoint
}

// NewEndpoints wraps the methods of the "user_controller" service with
// endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		GetUsers:   NewGetUsersEndpoint(s),
		GetUser:    NewGetUserEndpoint(s),
		UpdateUser: NewUpdateUserEndpoint(s),
		CreateUser: NewCreateUserEndpoint(s),
		DeleteUser: NewDeleteUserEndpoint(s),
	}
}

// Use applies the given middleware to all the "user_controller" service
// endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.GetUsers = m(e.GetUsers)
	e.GetUser = m(e.GetUser)
	e.UpdateUser = m(e.UpdateUser)
	e.CreateUser = m(e.CreateUser)
	e.DeleteUser = m(e.DeleteUser)
}

// NewGetUsersEndpoint returns an endpoint function that calls the method
// "GetUsers" of service "user_controller".
func NewGetUsersEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetUsers(ctx)
	}
}

// NewGetUserEndpoint returns an endpoint function that calls the method
// "GetUser" of service "user_controller".
func NewGetUserEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetUserPayload)
		return s.GetUser(ctx, p)
	}
}

// NewUpdateUserEndpoint returns an endpoint function that calls the method
// "UpdateUser" of service "user_controller".
func NewUpdateUserEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*User)
		return nil, s.UpdateUser(ctx, p)
	}
}

// NewCreateUserEndpoint returns an endpoint function that calls the method
// "CreateUser" of service "user_controller".
func NewCreateUserEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*User)
		return nil, s.CreateUser(ctx, p)
	}
}

// NewDeleteUserEndpoint returns an endpoint function that calls the method
// "DeleteUser" of service "user_controller".
func NewDeleteUserEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DeleteUserPayload)
		return nil, s.DeleteUser(ctx, p)
	}
}
