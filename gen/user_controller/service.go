// Code generated by goa v3.7.2, DO NOT EDIT.
//
// user_controller service
//
// Command:
// $ goa gen goa-sample/design

package usercontroller

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// ユーザ関連のエンドポイント
type Service interface {
	// ユーザ一覧の検索
	GetUsers(context.Context) (res []*User, err error)
	// ユーザ検索
	GetUser(context.Context, *GetUserPayload) (res *User, err error)
	// ユーザ更新
	UpdateUser(context.Context, *User) (err error)
	// ユーザ登録
	CreateUser(context.Context, *User) (err error)
	// ユーザ削除
	DeleteUser(context.Context, *DeleteUserPayload) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "user_controller"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"GetUsers", "GetUser", "UpdateUser", "CreateUser", "DeleteUser"}

// DeleteUserPayload is the payload type of the user_controller service
// DeleteUser method.
type DeleteUserPayload struct {
	// ユーザーID
	ID int
}

// GetUserPayload is the payload type of the user_controller service GetUser
// method.
type GetUserPayload struct {
	// ユーザーID
	ID int
}

// User is the result type of the user_controller service GetUser method.
type User struct {
	// ユーザーID
	ID *int
	// ユーザー名
	Name *string
	// Eメール
	Email *string
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "NotFound",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "BadRequest",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}
